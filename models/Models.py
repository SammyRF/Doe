from sklearn import *
from models.Model import Model

class Models:
    ModelList = [ Model("Default", svm.SVR(C=1, gamma='auto')),
                Model("DecisionTree", tree.DecisionTreeRegressor()),
                Model("KNeighbors", neighbors.KNeighborsRegressor()),
                Model("RNeighbors", neighbors.RadiusNeighborsRegressor()),
                Model("Bagging-50", ensemble.BaggingRegressor(n_estimators=50)),
                Model("RandomForest-50", ensemble.RandomForestRegressor(n_estimators=50)),
                Model("ExtraTree-50", ensemble.ExtraTreesRegressor(n_estimators=50)),
                Model("AdaBoost-50", ensemble.AdaBoostRegressor(n_estimators=50)),
                Model("GradientBoost-50", ensemble.GradientBoostingRegressor(n_estimators=50)),
                Model("Bagging-200", ensemble.BaggingRegressor(n_estimators=200)),
                Model("RandomForest-200", ensemble.RandomForestRegressor(n_estimators=200)),
                Model("ExtraTree-200", ensemble.ExtraTreesRegressor(n_estimators=200)),
                Model("AdaBoost-200", ensemble.AdaBoostRegressor(n_estimators=200)),
                Model("GradientBoost-200", ensemble.GradientBoostingRegressor(n_estimators=200)),
                Model("Bagging-500", ensemble.BaggingRegressor(n_estimators=500)),
                Model("RandomForest-500", ensemble.RandomForestRegressor(n_estimators=500)),
                Model("ExtraTree-500", ensemble.ExtraTreesRegressor(n_estimators=500)),
                Model("AdaBoost-500", ensemble.AdaBoostRegressor(n_estimators=500)),
                Model("GradientBoost-500", ensemble.GradientBoostingRegressor(n_estimators=500)),
                Model("LinearReg", linear_model.LinearRegression()),
                Model("ARDReg", linear_model.ARDRegression()),
                Model("BayesianRidge", linear_model.BayesianRidge()),
                Model("ElasticNet", linear_model.ElasticNetCV()),
                Model("Huber", linear_model.HuberRegressor()),
                Model("Lars", linear_model.LarsCV()),
                Model("Lasso", linear_model.LassoCV()),
                Model("LassoLars", linear_model.LassoLarsCV()),
                Model("LassoLarsIC-aic", linear_model.LassoLarsIC(criterion='aic')),
                Model("LassoLarsIC-bic", linear_model.LassoLarsIC(criterion='bic')),
                Model("PasAggReg", linear_model.PassiveAggressiveRegressor()),
                Model("SGDReg", linear_model.SGDRegressor()),
                Model("LinearRANSAC", linear_model.RANSACRegressor()),
                Model("LinearRidge", linear_model.RidgeCV()),
                Model("KernelRidge", kernel_ridge.KernelRidge()),
                Model("Gaussian", gaussian_process.GaussianProcessRegressor()),
                Model("NeuNetMLP", neural_network.MLPRegressor()),
                Model("SVR-C0.1", svm.SVR(C=0.1, gamma='auto')),
                Model("LinearSVR-C0.1", svm.LinearSVR(C=0.1)),
                Model("NuSVR-C0.1", svm.NuSVR(C=0.5, gamma='auto')),
                Model("SVR-C0.5", svm.SVR(C=0.5, gamma='auto')),
                Model("LinearSVR-C0.5", svm.LinearSVR(C=0.1)),
                Model("NuSVR-C0.5", svm.NuSVR(C=0.5, gamma='auto')),
                Model("SVR-C1", svm.SVR(C=1, gamma='auto')),
                Model("LinearSVR-C1", svm.LinearSVR(C=0.1)),
                Model("NuSVR-C1", svm.NuSVR(C=1, gamma='auto')),
                Model("SVR-C5", svm.SVR(C=5, gamma='auto')),
                Model("LinearSVR-C5", svm.LinearSVR(C=5)),
                Model("NuSVR-C5", svm.NuSVR(C=5, gamma='auto'))]